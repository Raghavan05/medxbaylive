the hospital selction only for in-person not video consultation :

const bufferToBase64 = (buffer) => {
    if (buffer?.type === 'Buffer' && Array.isArray(buffer?.data)) {
        const bytes = new Uint8Array(buffer.data);
        let binary = '';
        for (let i = 0; i < bytes.length; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return `data:image/jpeg;base64,${btoa(binary)}`;
    } else {
        console.error('Unexpected buffer type:', typeof buffer);
        return '';
    }
};
const calculateDistance = (lat1, lon1, lat2, lon2) => {
    const toRad = (value) => value * Math.PI / 180;
    const R = 6371; // Radius of the Earth in kilometers
    const dLat = toRad(lat2 - lat1);
    const dLon = toRad(lon2 - lon1);
    const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2);

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c; // Distance in kilometers
    return distance.toFixed(2); // Return distance with two decimal places
};
const DoctorCard = ({ isMapExpanded, doctor = {},location }) => {
    const [startIndex, setStartIndex] = useState(0);
    const [selectedDate, setSelectedDate] = useState(0);
    const [showDoctorCard, setShowDoctorCard] = useState(false);
    const [profilePicture, setProfilePicture] = useState(doctorProfile);
    const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);
    const [consultationType, setConsultationType] = useState(''); // Default consultation type
    // const [showAllHospitals, setShowAllHospitals] = useState(false); // State to show all hospitals
    const [selectedHospital, setSelectedHospital] = useState(''); // State for selected hospital
    const [userLocation, setUserLocation] = useState({ lat: 0, lng: 0 });
    const [hospitalDistance, setHospitalDistance] = useState(null);
    const [hospitalLocationLat, setHospitalLocationLat] = useState(null);
    const [hospitalLocationLng, setHospitalLocationLng] = useState(null); 
    const [hospitalCity, setHospitalCity] = useState(null); 
    const [userLoggedin,setUserLogged] = useState();
    const [showPopup, setShowPopup] = useState(false);
    const [showLoginPopup,setShowLoginPopup] = useState(false);
    const navigate = useNavigate();
    useEffect(() => {
        if (doctor.profilePicture && doctor.profilePicture.data) {
            // console.log('Profile picture data type:', typeof doctor.profilePicture.data);
            // console.log('Profile picture data:', doctor.profilePicture.data);
            const base64String = bufferToBase64(doctor.profilePicture.data);
            setProfilePicture(base64String);
        }
    }, [doctor.profilePicture]);
    useEffect(() => {
        const loggedIn = sessionStorage.getItem('loggedIn') === 'true';
        setUserLogged(loggedIn);
    }, []);
    useEffect(() => {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                setUserLocation({
                    lat: position.coords.latitude,
                    lng: position.coords.longitude,
                });
            },
            (error) => {
                console.error('Error fetching geolocation:', error);
                toast.error('Unable to fetch your location. Please enable location services.');
            }
        );
    }, []);
    // Calculate distance when hospital or user location changes
    useEffect(() => {
        if (selectedHospital && doctor.hospitals) {
            const hospital = doctor.hospitals.find(h => h.name === selectedHospital);
            // console.log(hospital.city)
            setHospitalCity(hospital.city)
            setHospitalLocationLat(hospital.lat);
            setHospitalLocationLng(hospital.lng);
            if (hospital && hospital.lat && hospital.lng && userLocation.lat && userLocation.lng) {
                const distance = calculateDistance(userLocation.lat, userLocation.lng, hospital.lat, hospital.lng);
                setHospitalDistance(distance);
            }
        }
    }, [selectedHospital, doctor.hospitals, userLocation]);
    const timeSlots = doctor.timeSlots || []; 
    const filteredTimeSlots = selectedHospital
        ? timeSlots.filter(slot => slot.hospital === selectedHospital && new Date(slot.date) >= new Date() && slot.status === "free")
        : timeSlots.filter(slot => new Date(slot.date) >= new Date() && slot.status === "free");
    const datesMap = filteredTimeSlots.reduce((acc, slot) => {
        const date = new Date(slot.date).toDateString();
        if (!acc[date]) {
            acc[date] = { day: date, slots: 0, timeSlots: [] };
        }
        acc[date].slots += 1;
        acc[date].timeSlots.push(slot);
        return acc;
    }, {});
    const dates = Object.values(datesMap);
    while (dates.length < 3) {
        dates.push({ day: 'Unavailable', slots: 0, timeSlots: [] });
    }
    const groupedSlots = {
        morning: [],
        afternoon: [],
        evening: []
    };
    // Group time slots into morning, afternoon, evening
    if (dates[selectedDate]) {
        dates[selectedDate].timeSlots.forEach(slot => {
            const hour = parseInt(slot.startTime.split(':')[0], 10);
            if (hour < 12) {
                groupedSlots.morning.push(slot.startTime);
            } else if (hour < 17) {
                groupedSlots.afternoon.push(slot.startTime);
            } else {
                groupedSlots.evening.push(slot.startTime);
            }
        });
    }
    const showPrev = () => {
        if (startIndex > 0) {
            setStartIndex(startIndex - 1);
            setSelectedDate(selectedDate - 1);
        }
    };
    const showNext = () => {
        if (startIndex + 3 < dates.length) {
            setStartIndex(startIndex + 1);
            setSelectedDate(selectedDate + 1);
        }
    };
    const handleShowLogin = () => setShowLoginPopup(true);
    const handleShowPopup = () => setShowPopup(true);
    const handleClosePopup = () => setShowPopup(false);
    const handleShowCard = () => {
        setShowDoctorCard(prevState => !prevState);
    };
    const handleTimeSlotClick = (slot) => {
        setSelectedTimeSlot(slot);
    };
    const handleBookAppointment = async () => {
        if (!userLoggedin) {
            toast.info('You need to log in to book an appointment.', {
                className: 'toast-sign toast-fail',
                closeButton: true,
                progressBar: true,
            });
            setTimeout(() => {
                navigate('/');
            }, 2000); 
            return;
        }
        if (!selectedHospital) {
            toast.info('Please select a hospital.', {
                className: 'toast-center',
                closeButton: true,
                progressBar: true,
            });
            return;
        }
        try {
            const selectedDay = dates[selectedDate];
            if (consultationType === '') {
                toast('Please select a consultation type.', {
                    className: 'toast-center',
                    closeButton: true,
                    progressBar: true,
                });
                return;
            }
            const bookingData = {
                doctorId: doctor._id,
                date: moment(selectedDay.day).format('YYYY-MM-DD'),
                startTime: selectedTimeSlot,
                consultationType: consultationType
            };
            const response = await fetch(`${process.env.REACT_APP_BASE_URL}/patient/book`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(bookingData),
                credentials: 'include' 
            });
            const result = await response.json();
            if (response.ok) {
                window.location.href = result.url; 
            } else {
                toast.info('Unexpected response from server. Please try again.', {
                    className: 'toast-center toast-fail',
                    closeButton: true,
                    progressBar: true,
                });
            }
        } catch (error) {
            console.error('Error booking appointment:', error.message);
            toast.info('Error booking appointment. Please try again.', {
                className: 'toast-center toast-fail',
                closeButton: true,
                progressBar: true,
            });
        }
    };
        const renderStars = (rating) => {
            const fullStars = Math.floor(rating);
            const hasHalfStar = rating % 1 !== 0;
            const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

            const stars = [];
            for (let i = 0; i < fullStars; i++) {
                stars.push(<FontAwesomeIcon key={`full-${i}`} icon={fasStar} style={{ color: "#37adff", fontSize: "12px" }} />);
            }
            if (hasHalfStar) {
                stars.push(<FontAwesomeIcon key="half" icon={faStarHalfAlt} style={{ color: "#37adff", fontSize: "12px" }} />);
            }
            for (let i = 0; i < emptyStars; i++) {
                stars.push(<FontAwesomeIcon key={`empty-${i}`} icon={farStar} style={{ color: "#37adff", fontSize: "12px" }} />);
            }
            return stars;
        };
        const renderConsultationType = () => {
            return (
                <>
                    {doctor.consultation === 'In-person' || doctor.consultation === 'Both' ? (
                        <div className={`p-1 ${consultationType === "In-person" ? "consultationActiveColor" : ""}`}>
                            <div className="form-check">
                                <input
                                    className="form-check-input"
                                    type="checkbox"
                                    id="inPersonCheck"
                                    checked={consultationType === 'In-person'}
                                    onChange={() => {
                                        if (consultationType === 'In-person') {
                                            setConsultationType(''); // Uncheck if already selected
                                        } else {
                                            setConsultationType('In-person'); // Check In-person
                                        }
                                    }}
                                />
                                <img src={MedicalService} alt="In-Person" />
                                <label className="form-check-label" htmlFor="inPersonCheck">
                                    In-Person
                                </label>
                            </div>
                        </div>
                    ) : null}
                    {doctor.consultation === 'video call' || doctor.consultation === 'Both' ? (
                        <div className={`p-1 ${consultationType === "video call" ? "consultationActiveColor" : ""}`}>
                            <div className="form-check">
                                <input
                                    className="form-check-input"
                                    type="checkbox"
                                    id="videoCallCheck"
                                    checked={consultationType === 'video call'}
                                    onChange={() => {
                                        if (consultationType === 'video call') {
                                            setConsultationType(''); // Uncheck if already selected
                                        } else {
                                            setConsultationType('video call'); // Check Video Consultation
                                        }
                                    }}
                                />
                                <img src={videoCall} alt="Video Consultation" />
                                <label className="form-check-label" htmlFor="videoCallCheck">
                                    Video Consultation
                                </label>
                            </div>
                            {/* Conditionally render the price for Video Consultation */}
                            {consultationType === 'video call' && doctor.doctorFee && (
                                <div className="consultation-price">
                                <p>Price: <span>${doctor.doctorFee}</span></p>
                                </div>
                            )}
                        </div>
                    ) : null}
                </>
            );
        };
